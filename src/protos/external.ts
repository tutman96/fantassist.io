// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.26.1
// source: protos/external.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { Scene } from "./scene";

export const protobufPackage = "";

export interface Packet {
  requestId: string;
  request?: Request | undefined;
  response?: Response | undefined;
}

export interface Request {
  /** Respond with AckResponse */
  helloRequest?:
    | HelloRequest
    | undefined;
  /** Respond with AckResponse */
  displaySceneRequest?:
    | DisplaySceneRequest
    | undefined;
  /** Respond with GetAssetResponse */
  getAssetRequest?:
    | GetAssetRequest
    | undefined;
  /** Respond with GetTableConfigurationResponse */
  getTableConfigurationRequest?:
    | GetTableConfigurationRequest
    | undefined;
  /** Respond with GetCurrentSceneResponse */
  getCurrentSceneRequest?:
    | GetCurrentSceneRequest
    | undefined;
  /** Respond with TrackerGetStatusResponse */
  trackerGetStatusRequest?:
    | TrackerGetStatusRequest
    | undefined;
  /** Respond with AckResponse */
  trackerSetIdleRequest?:
    | TrackerSetIdleRequest
    | undefined;
  /** Respond with AckResponse */
  trackerStartCalibrationRequest?:
    | TrackerStartCalibrationRequest
    | undefined;
  /** Respond with TrackerGetCalibrationResponse */
  trackerGetCalibrationRequest?:
    | TrackerGetCalibrationRequest
    | undefined;
  /** Respond with AckResponse */
  trackerStartTrackingRequest?:
    | TrackerStartTrackingRequest
    | undefined;
  /** Respond with TrackerGetMarkerLocationResponse */
  trackerGetMarkerLocationRequest?:
    | TrackerGetMarkerLocationRequest
    | undefined;
  /** Don't respond */
  trackerUpdateMarkerLocationRequest?: TrackerUpdateMarkerLocationRequest | undefined;
}

export interface Response {
  ackResponse?: AckResponse | undefined;
  getAssetResponse?: GetAssetResponse | undefined;
  getTableConfigurationResponse?: GetTableConfigurationResponse | undefined;
  getCurrentSceneResponse?:
    | GetCurrentSceneResponse
    | undefined;
  /** ------- Tracker ------- // */
  trackerGetStatusResponse?: TrackerGetStatusResponse | undefined;
  trackerGetCalibrationResponse?: TrackerGetCalibrationResponse | undefined;
  trackerGetMarkerLocationResponse?: TrackerGetMarkerLocationResponse | undefined;
}

export interface HelloRequest {
}

export interface AckResponse {
}

export interface DisplaySceneRequest {
  scene: Scene | undefined;
}

export interface GetAssetRequest {
  id: string;
}

export interface GetAssetResponse {
  id: string;
  payload: Uint8Array;
  mediaType: string;
}

export interface GetTableConfigurationRequest {
}

export interface GetTableConfigurationResponse {
  resolution: GetTableConfigurationResponse_Resolution | undefined;
  size: number;
}

export interface GetTableConfigurationResponse_Resolution {
  width: number;
  height: number;
}

export interface GetCurrentSceneRequest {
}

export interface GetCurrentSceneResponse {
  scene: Scene | undefined;
}

export interface TrackerGetStatusRequest {
}

export interface TrackerVector2d {
  x: number;
  y: number;
}

export interface TrackerGetStatusResponse {
  uuid: string;
  version: string;
  state: TrackerGetStatusResponse_TrackerState;
}

export enum TrackerGetStatusResponse_TrackerState {
  IDLE = 0,
  CALIBRATING = 1,
  TRACKING = 2,
  UNRECOGNIZED = -1,
}

export function trackerGetStatusResponse_TrackerStateFromJSON(object: any): TrackerGetStatusResponse_TrackerState {
  switch (object) {
    case 0:
    case "IDLE":
      return TrackerGetStatusResponse_TrackerState.IDLE;
    case 1:
    case "CALIBRATING":
      return TrackerGetStatusResponse_TrackerState.CALIBRATING;
    case 2:
    case "TRACKING":
      return TrackerGetStatusResponse_TrackerState.TRACKING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TrackerGetStatusResponse_TrackerState.UNRECOGNIZED;
  }
}

export function trackerGetStatusResponse_TrackerStateToJSON(object: TrackerGetStatusResponse_TrackerState): string {
  switch (object) {
    case TrackerGetStatusResponse_TrackerState.IDLE:
      return "IDLE";
    case TrackerGetStatusResponse_TrackerState.CALIBRATING:
      return "CALIBRATING";
    case TrackerGetStatusResponse_TrackerState.TRACKING:
      return "TRACKING";
    case TrackerGetStatusResponse_TrackerState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface TrackerSetIdleRequest {
}

export interface TrackerStartCalibrationRequest {
  corners: TrackerVector2d[];
}

export interface TrackerGetCalibrationRequest {
}

export interface TrackerGetCalibrationResponse {
  foundCorners: number[];
  cornerLocations: TrackerVector2d[];
}

export interface TrackerStartTrackingRequest {
  updateRateMs: number;
}

export interface TrackerGetMarkerLocationRequest {
}

export interface TrackerGetMarkerLocationResponse {
  markerLocations: { [key: number]: TrackerVector2d };
}

export interface TrackerGetMarkerLocationResponse_MarkerLocationsEntry {
  key: number;
  value: TrackerVector2d | undefined;
}

export interface TrackerUpdateMarkerLocationRequest {
  markerLocations: { [key: number]: TrackerVector2d };
}

export interface TrackerUpdateMarkerLocationRequest_MarkerLocationsEntry {
  key: number;
  value: TrackerVector2d | undefined;
}

function createBasePacket(): Packet {
  return { requestId: "", request: undefined, response: undefined };
}

export const Packet = {
  encode(message: Packet, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.requestId !== "") {
      writer.uint32(10).string(message.requestId);
    }
    if (message.request !== undefined) {
      Request.encode(message.request, writer.uint32(82).fork()).ldelim();
    }
    if (message.response !== undefined) {
      Response.encode(message.response, writer.uint32(90).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Packet {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePacket();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.requestId = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.request = Request.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.response = Response.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Packet {
    return {
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      request: isSet(object.request) ? Request.fromJSON(object.request) : undefined,
      response: isSet(object.response) ? Response.fromJSON(object.response) : undefined,
    };
  },

  toJSON(message: Packet): unknown {
    const obj: any = {};
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.request !== undefined) {
      obj.request = Request.toJSON(message.request);
    }
    if (message.response !== undefined) {
      obj.response = Response.toJSON(message.response);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Packet>, I>>(base?: I): Packet {
    return Packet.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Packet>, I>>(object: I): Packet {
    const message = createBasePacket();
    message.requestId = object.requestId ?? "";
    message.request = (object.request !== undefined && object.request !== null)
      ? Request.fromPartial(object.request)
      : undefined;
    message.response = (object.response !== undefined && object.response !== null)
      ? Response.fromPartial(object.response)
      : undefined;
    return message;
  },
};

function createBaseRequest(): Request {
  return {
    helloRequest: undefined,
    displaySceneRequest: undefined,
    getAssetRequest: undefined,
    getTableConfigurationRequest: undefined,
    getCurrentSceneRequest: undefined,
    trackerGetStatusRequest: undefined,
    trackerSetIdleRequest: undefined,
    trackerStartCalibrationRequest: undefined,
    trackerGetCalibrationRequest: undefined,
    trackerStartTrackingRequest: undefined,
    trackerGetMarkerLocationRequest: undefined,
    trackerUpdateMarkerLocationRequest: undefined,
  };
}

export const Request = {
  encode(message: Request, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.helloRequest !== undefined) {
      HelloRequest.encode(message.helloRequest, writer.uint32(10).fork()).ldelim();
    }
    if (message.displaySceneRequest !== undefined) {
      DisplaySceneRequest.encode(message.displaySceneRequest, writer.uint32(18).fork()).ldelim();
    }
    if (message.getAssetRequest !== undefined) {
      GetAssetRequest.encode(message.getAssetRequest, writer.uint32(26).fork()).ldelim();
    }
    if (message.getTableConfigurationRequest !== undefined) {
      GetTableConfigurationRequest.encode(message.getTableConfigurationRequest, writer.uint32(34).fork()).ldelim();
    }
    if (message.getCurrentSceneRequest !== undefined) {
      GetCurrentSceneRequest.encode(message.getCurrentSceneRequest, writer.uint32(42).fork()).ldelim();
    }
    if (message.trackerGetStatusRequest !== undefined) {
      TrackerGetStatusRequest.encode(message.trackerGetStatusRequest, writer.uint32(82).fork()).ldelim();
    }
    if (message.trackerSetIdleRequest !== undefined) {
      TrackerSetIdleRequest.encode(message.trackerSetIdleRequest, writer.uint32(90).fork()).ldelim();
    }
    if (message.trackerStartCalibrationRequest !== undefined) {
      TrackerStartCalibrationRequest.encode(message.trackerStartCalibrationRequest, writer.uint32(98).fork()).ldelim();
    }
    if (message.trackerGetCalibrationRequest !== undefined) {
      TrackerGetCalibrationRequest.encode(message.trackerGetCalibrationRequest, writer.uint32(106).fork()).ldelim();
    }
    if (message.trackerStartTrackingRequest !== undefined) {
      TrackerStartTrackingRequest.encode(message.trackerStartTrackingRequest, writer.uint32(114).fork()).ldelim();
    }
    if (message.trackerGetMarkerLocationRequest !== undefined) {
      TrackerGetMarkerLocationRequest.encode(message.trackerGetMarkerLocationRequest, writer.uint32(122).fork())
        .ldelim();
    }
    if (message.trackerUpdateMarkerLocationRequest !== undefined) {
      TrackerUpdateMarkerLocationRequest.encode(message.trackerUpdateMarkerLocationRequest, writer.uint32(130).fork())
        .ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Request {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.helloRequest = HelloRequest.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displaySceneRequest = DisplaySceneRequest.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.getAssetRequest = GetAssetRequest.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.getTableConfigurationRequest = GetTableConfigurationRequest.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.getCurrentSceneRequest = GetCurrentSceneRequest.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.trackerGetStatusRequest = TrackerGetStatusRequest.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.trackerSetIdleRequest = TrackerSetIdleRequest.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.trackerStartCalibrationRequest = TrackerStartCalibrationRequest.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.trackerGetCalibrationRequest = TrackerGetCalibrationRequest.decode(reader, reader.uint32());
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.trackerStartTrackingRequest = TrackerStartTrackingRequest.decode(reader, reader.uint32());
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.trackerGetMarkerLocationRequest = TrackerGetMarkerLocationRequest.decode(reader, reader.uint32());
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.trackerUpdateMarkerLocationRequest = TrackerUpdateMarkerLocationRequest.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Request {
    return {
      helloRequest: isSet(object.helloRequest) ? HelloRequest.fromJSON(object.helloRequest) : undefined,
      displaySceneRequest: isSet(object.displaySceneRequest)
        ? DisplaySceneRequest.fromJSON(object.displaySceneRequest)
        : undefined,
      getAssetRequest: isSet(object.getAssetRequest) ? GetAssetRequest.fromJSON(object.getAssetRequest) : undefined,
      getTableConfigurationRequest: isSet(object.getTableConfigurationRequest)
        ? GetTableConfigurationRequest.fromJSON(object.getTableConfigurationRequest)
        : undefined,
      getCurrentSceneRequest: isSet(object.getCurrentSceneRequest)
        ? GetCurrentSceneRequest.fromJSON(object.getCurrentSceneRequest)
        : undefined,
      trackerGetStatusRequest: isSet(object.trackerGetStatusRequest)
        ? TrackerGetStatusRequest.fromJSON(object.trackerGetStatusRequest)
        : undefined,
      trackerSetIdleRequest: isSet(object.trackerSetIdleRequest)
        ? TrackerSetIdleRequest.fromJSON(object.trackerSetIdleRequest)
        : undefined,
      trackerStartCalibrationRequest: isSet(object.trackerStartCalibrationRequest)
        ? TrackerStartCalibrationRequest.fromJSON(object.trackerStartCalibrationRequest)
        : undefined,
      trackerGetCalibrationRequest: isSet(object.trackerGetCalibrationRequest)
        ? TrackerGetCalibrationRequest.fromJSON(object.trackerGetCalibrationRequest)
        : undefined,
      trackerStartTrackingRequest: isSet(object.trackerStartTrackingRequest)
        ? TrackerStartTrackingRequest.fromJSON(object.trackerStartTrackingRequest)
        : undefined,
      trackerGetMarkerLocationRequest: isSet(object.trackerGetMarkerLocationRequest)
        ? TrackerGetMarkerLocationRequest.fromJSON(object.trackerGetMarkerLocationRequest)
        : undefined,
      trackerUpdateMarkerLocationRequest: isSet(object.trackerUpdateMarkerLocationRequest)
        ? TrackerUpdateMarkerLocationRequest.fromJSON(object.trackerUpdateMarkerLocationRequest)
        : undefined,
    };
  },

  toJSON(message: Request): unknown {
    const obj: any = {};
    if (message.helloRequest !== undefined) {
      obj.helloRequest = HelloRequest.toJSON(message.helloRequest);
    }
    if (message.displaySceneRequest !== undefined) {
      obj.displaySceneRequest = DisplaySceneRequest.toJSON(message.displaySceneRequest);
    }
    if (message.getAssetRequest !== undefined) {
      obj.getAssetRequest = GetAssetRequest.toJSON(message.getAssetRequest);
    }
    if (message.getTableConfigurationRequest !== undefined) {
      obj.getTableConfigurationRequest = GetTableConfigurationRequest.toJSON(message.getTableConfigurationRequest);
    }
    if (message.getCurrentSceneRequest !== undefined) {
      obj.getCurrentSceneRequest = GetCurrentSceneRequest.toJSON(message.getCurrentSceneRequest);
    }
    if (message.trackerGetStatusRequest !== undefined) {
      obj.trackerGetStatusRequest = TrackerGetStatusRequest.toJSON(message.trackerGetStatusRequest);
    }
    if (message.trackerSetIdleRequest !== undefined) {
      obj.trackerSetIdleRequest = TrackerSetIdleRequest.toJSON(message.trackerSetIdleRequest);
    }
    if (message.trackerStartCalibrationRequest !== undefined) {
      obj.trackerStartCalibrationRequest = TrackerStartCalibrationRequest.toJSON(
        message.trackerStartCalibrationRequest,
      );
    }
    if (message.trackerGetCalibrationRequest !== undefined) {
      obj.trackerGetCalibrationRequest = TrackerGetCalibrationRequest.toJSON(message.trackerGetCalibrationRequest);
    }
    if (message.trackerStartTrackingRequest !== undefined) {
      obj.trackerStartTrackingRequest = TrackerStartTrackingRequest.toJSON(message.trackerStartTrackingRequest);
    }
    if (message.trackerGetMarkerLocationRequest !== undefined) {
      obj.trackerGetMarkerLocationRequest = TrackerGetMarkerLocationRequest.toJSON(
        message.trackerGetMarkerLocationRequest,
      );
    }
    if (message.trackerUpdateMarkerLocationRequest !== undefined) {
      obj.trackerUpdateMarkerLocationRequest = TrackerUpdateMarkerLocationRequest.toJSON(
        message.trackerUpdateMarkerLocationRequest,
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Request>, I>>(base?: I): Request {
    return Request.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Request>, I>>(object: I): Request {
    const message = createBaseRequest();
    message.helloRequest = (object.helloRequest !== undefined && object.helloRequest !== null)
      ? HelloRequest.fromPartial(object.helloRequest)
      : undefined;
    message.displaySceneRequest = (object.displaySceneRequest !== undefined && object.displaySceneRequest !== null)
      ? DisplaySceneRequest.fromPartial(object.displaySceneRequest)
      : undefined;
    message.getAssetRequest = (object.getAssetRequest !== undefined && object.getAssetRequest !== null)
      ? GetAssetRequest.fromPartial(object.getAssetRequest)
      : undefined;
    message.getTableConfigurationRequest =
      (object.getTableConfigurationRequest !== undefined && object.getTableConfigurationRequest !== null)
        ? GetTableConfigurationRequest.fromPartial(object.getTableConfigurationRequest)
        : undefined;
    message.getCurrentSceneRequest =
      (object.getCurrentSceneRequest !== undefined && object.getCurrentSceneRequest !== null)
        ? GetCurrentSceneRequest.fromPartial(object.getCurrentSceneRequest)
        : undefined;
    message.trackerGetStatusRequest =
      (object.trackerGetStatusRequest !== undefined && object.trackerGetStatusRequest !== null)
        ? TrackerGetStatusRequest.fromPartial(object.trackerGetStatusRequest)
        : undefined;
    message.trackerSetIdleRequest =
      (object.trackerSetIdleRequest !== undefined && object.trackerSetIdleRequest !== null)
        ? TrackerSetIdleRequest.fromPartial(object.trackerSetIdleRequest)
        : undefined;
    message.trackerStartCalibrationRequest =
      (object.trackerStartCalibrationRequest !== undefined && object.trackerStartCalibrationRequest !== null)
        ? TrackerStartCalibrationRequest.fromPartial(object.trackerStartCalibrationRequest)
        : undefined;
    message.trackerGetCalibrationRequest =
      (object.trackerGetCalibrationRequest !== undefined && object.trackerGetCalibrationRequest !== null)
        ? TrackerGetCalibrationRequest.fromPartial(object.trackerGetCalibrationRequest)
        : undefined;
    message.trackerStartTrackingRequest =
      (object.trackerStartTrackingRequest !== undefined && object.trackerStartTrackingRequest !== null)
        ? TrackerStartTrackingRequest.fromPartial(object.trackerStartTrackingRequest)
        : undefined;
    message.trackerGetMarkerLocationRequest =
      (object.trackerGetMarkerLocationRequest !== undefined && object.trackerGetMarkerLocationRequest !== null)
        ? TrackerGetMarkerLocationRequest.fromPartial(object.trackerGetMarkerLocationRequest)
        : undefined;
    message.trackerUpdateMarkerLocationRequest =
      (object.trackerUpdateMarkerLocationRequest !== undefined && object.trackerUpdateMarkerLocationRequest !== null)
        ? TrackerUpdateMarkerLocationRequest.fromPartial(object.trackerUpdateMarkerLocationRequest)
        : undefined;
    return message;
  },
};

function createBaseResponse(): Response {
  return {
    ackResponse: undefined,
    getAssetResponse: undefined,
    getTableConfigurationResponse: undefined,
    getCurrentSceneResponse: undefined,
    trackerGetStatusResponse: undefined,
    trackerGetCalibrationResponse: undefined,
    trackerGetMarkerLocationResponse: undefined,
  };
}

export const Response = {
  encode(message: Response, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.ackResponse !== undefined) {
      AckResponse.encode(message.ackResponse, writer.uint32(10).fork()).ldelim();
    }
    if (message.getAssetResponse !== undefined) {
      GetAssetResponse.encode(message.getAssetResponse, writer.uint32(18).fork()).ldelim();
    }
    if (message.getTableConfigurationResponse !== undefined) {
      GetTableConfigurationResponse.encode(message.getTableConfigurationResponse, writer.uint32(26).fork()).ldelim();
    }
    if (message.getCurrentSceneResponse !== undefined) {
      GetCurrentSceneResponse.encode(message.getCurrentSceneResponse, writer.uint32(34).fork()).ldelim();
    }
    if (message.trackerGetStatusResponse !== undefined) {
      TrackerGetStatusResponse.encode(message.trackerGetStatusResponse, writer.uint32(82).fork()).ldelim();
    }
    if (message.trackerGetCalibrationResponse !== undefined) {
      TrackerGetCalibrationResponse.encode(message.trackerGetCalibrationResponse, writer.uint32(90).fork()).ldelim();
    }
    if (message.trackerGetMarkerLocationResponse !== undefined) {
      TrackerGetMarkerLocationResponse.encode(message.trackerGetMarkerLocationResponse, writer.uint32(98).fork())
        .ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Response {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.ackResponse = AckResponse.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.getAssetResponse = GetAssetResponse.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.getTableConfigurationResponse = GetTableConfigurationResponse.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.getCurrentSceneResponse = GetCurrentSceneResponse.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.trackerGetStatusResponse = TrackerGetStatusResponse.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.trackerGetCalibrationResponse = TrackerGetCalibrationResponse.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.trackerGetMarkerLocationResponse = TrackerGetMarkerLocationResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Response {
    return {
      ackResponse: isSet(object.ackResponse) ? AckResponse.fromJSON(object.ackResponse) : undefined,
      getAssetResponse: isSet(object.getAssetResponse) ? GetAssetResponse.fromJSON(object.getAssetResponse) : undefined,
      getTableConfigurationResponse: isSet(object.getTableConfigurationResponse)
        ? GetTableConfigurationResponse.fromJSON(object.getTableConfigurationResponse)
        : undefined,
      getCurrentSceneResponse: isSet(object.getCurrentSceneResponse)
        ? GetCurrentSceneResponse.fromJSON(object.getCurrentSceneResponse)
        : undefined,
      trackerGetStatusResponse: isSet(object.trackerGetStatusResponse)
        ? TrackerGetStatusResponse.fromJSON(object.trackerGetStatusResponse)
        : undefined,
      trackerGetCalibrationResponse: isSet(object.trackerGetCalibrationResponse)
        ? TrackerGetCalibrationResponse.fromJSON(object.trackerGetCalibrationResponse)
        : undefined,
      trackerGetMarkerLocationResponse: isSet(object.trackerGetMarkerLocationResponse)
        ? TrackerGetMarkerLocationResponse.fromJSON(object.trackerGetMarkerLocationResponse)
        : undefined,
    };
  },

  toJSON(message: Response): unknown {
    const obj: any = {};
    if (message.ackResponse !== undefined) {
      obj.ackResponse = AckResponse.toJSON(message.ackResponse);
    }
    if (message.getAssetResponse !== undefined) {
      obj.getAssetResponse = GetAssetResponse.toJSON(message.getAssetResponse);
    }
    if (message.getTableConfigurationResponse !== undefined) {
      obj.getTableConfigurationResponse = GetTableConfigurationResponse.toJSON(message.getTableConfigurationResponse);
    }
    if (message.getCurrentSceneResponse !== undefined) {
      obj.getCurrentSceneResponse = GetCurrentSceneResponse.toJSON(message.getCurrentSceneResponse);
    }
    if (message.trackerGetStatusResponse !== undefined) {
      obj.trackerGetStatusResponse = TrackerGetStatusResponse.toJSON(message.trackerGetStatusResponse);
    }
    if (message.trackerGetCalibrationResponse !== undefined) {
      obj.trackerGetCalibrationResponse = TrackerGetCalibrationResponse.toJSON(message.trackerGetCalibrationResponse);
    }
    if (message.trackerGetMarkerLocationResponse !== undefined) {
      obj.trackerGetMarkerLocationResponse = TrackerGetMarkerLocationResponse.toJSON(
        message.trackerGetMarkerLocationResponse,
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Response>, I>>(base?: I): Response {
    return Response.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Response>, I>>(object: I): Response {
    const message = createBaseResponse();
    message.ackResponse = (object.ackResponse !== undefined && object.ackResponse !== null)
      ? AckResponse.fromPartial(object.ackResponse)
      : undefined;
    message.getAssetResponse = (object.getAssetResponse !== undefined && object.getAssetResponse !== null)
      ? GetAssetResponse.fromPartial(object.getAssetResponse)
      : undefined;
    message.getTableConfigurationResponse =
      (object.getTableConfigurationResponse !== undefined && object.getTableConfigurationResponse !== null)
        ? GetTableConfigurationResponse.fromPartial(object.getTableConfigurationResponse)
        : undefined;
    message.getCurrentSceneResponse =
      (object.getCurrentSceneResponse !== undefined && object.getCurrentSceneResponse !== null)
        ? GetCurrentSceneResponse.fromPartial(object.getCurrentSceneResponse)
        : undefined;
    message.trackerGetStatusResponse =
      (object.trackerGetStatusResponse !== undefined && object.trackerGetStatusResponse !== null)
        ? TrackerGetStatusResponse.fromPartial(object.trackerGetStatusResponse)
        : undefined;
    message.trackerGetCalibrationResponse =
      (object.trackerGetCalibrationResponse !== undefined && object.trackerGetCalibrationResponse !== null)
        ? TrackerGetCalibrationResponse.fromPartial(object.trackerGetCalibrationResponse)
        : undefined;
    message.trackerGetMarkerLocationResponse =
      (object.trackerGetMarkerLocationResponse !== undefined && object.trackerGetMarkerLocationResponse !== null)
        ? TrackerGetMarkerLocationResponse.fromPartial(object.trackerGetMarkerLocationResponse)
        : undefined;
    return message;
  },
};

function createBaseHelloRequest(): HelloRequest {
  return {};
}

export const HelloRequest = {
  encode(_: HelloRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): HelloRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHelloRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): HelloRequest {
    return {};
  },

  toJSON(_: HelloRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<HelloRequest>, I>>(base?: I): HelloRequest {
    return HelloRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HelloRequest>, I>>(_: I): HelloRequest {
    const message = createBaseHelloRequest();
    return message;
  },
};

function createBaseAckResponse(): AckResponse {
  return {};
}

export const AckResponse = {
  encode(_: AckResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AckResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAckResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): AckResponse {
    return {};
  },

  toJSON(_: AckResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<AckResponse>, I>>(base?: I): AckResponse {
    return AckResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AckResponse>, I>>(_: I): AckResponse {
    const message = createBaseAckResponse();
    return message;
  },
};

function createBaseDisplaySceneRequest(): DisplaySceneRequest {
  return { scene: undefined };
}

export const DisplaySceneRequest = {
  encode(message: DisplaySceneRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.scene !== undefined) {
      Scene.encode(message.scene, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DisplaySceneRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDisplaySceneRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.scene = Scene.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DisplaySceneRequest {
    return { scene: isSet(object.scene) ? Scene.fromJSON(object.scene) : undefined };
  },

  toJSON(message: DisplaySceneRequest): unknown {
    const obj: any = {};
    if (message.scene !== undefined) {
      obj.scene = Scene.toJSON(message.scene);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DisplaySceneRequest>, I>>(base?: I): DisplaySceneRequest {
    return DisplaySceneRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DisplaySceneRequest>, I>>(object: I): DisplaySceneRequest {
    const message = createBaseDisplaySceneRequest();
    message.scene = (object.scene !== undefined && object.scene !== null) ? Scene.fromPartial(object.scene) : undefined;
    return message;
  },
};

function createBaseGetAssetRequest(): GetAssetRequest {
  return { id: "" };
}

export const GetAssetRequest = {
  encode(message: GetAssetRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetAssetRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAssetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAssetRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: GetAssetRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAssetRequest>, I>>(base?: I): GetAssetRequest {
    return GetAssetRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAssetRequest>, I>>(object: I): GetAssetRequest {
    const message = createBaseGetAssetRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseGetAssetResponse(): GetAssetResponse {
  return { id: "", payload: new Uint8Array(0), mediaType: "" };
}

export const GetAssetResponse = {
  encode(message: GetAssetResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.payload.length !== 0) {
      writer.uint32(18).bytes(message.payload);
    }
    if (message.mediaType !== "") {
      writer.uint32(26).string(message.mediaType);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetAssetResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAssetResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.payload = reader.bytes();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.mediaType = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAssetResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      payload: isSet(object.payload) ? bytesFromBase64(object.payload) : new Uint8Array(0),
      mediaType: isSet(object.mediaType) ? globalThis.String(object.mediaType) : "",
    };
  },

  toJSON(message: GetAssetResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.payload.length !== 0) {
      obj.payload = base64FromBytes(message.payload);
    }
    if (message.mediaType !== "") {
      obj.mediaType = message.mediaType;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAssetResponse>, I>>(base?: I): GetAssetResponse {
    return GetAssetResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAssetResponse>, I>>(object: I): GetAssetResponse {
    const message = createBaseGetAssetResponse();
    message.id = object.id ?? "";
    message.payload = object.payload ?? new Uint8Array(0);
    message.mediaType = object.mediaType ?? "";
    return message;
  },
};

function createBaseGetTableConfigurationRequest(): GetTableConfigurationRequest {
  return {};
}

export const GetTableConfigurationRequest = {
  encode(_: GetTableConfigurationRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetTableConfigurationRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTableConfigurationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetTableConfigurationRequest {
    return {};
  },

  toJSON(_: GetTableConfigurationRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetTableConfigurationRequest>, I>>(base?: I): GetTableConfigurationRequest {
    return GetTableConfigurationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetTableConfigurationRequest>, I>>(_: I): GetTableConfigurationRequest {
    const message = createBaseGetTableConfigurationRequest();
    return message;
  },
};

function createBaseGetTableConfigurationResponse(): GetTableConfigurationResponse {
  return { resolution: undefined, size: 0 };
}

export const GetTableConfigurationResponse = {
  encode(message: GetTableConfigurationResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.resolution !== undefined) {
      GetTableConfigurationResponse_Resolution.encode(message.resolution, writer.uint32(10).fork()).ldelim();
    }
    if (message.size !== 0) {
      writer.uint32(17).double(message.size);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetTableConfigurationResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTableConfigurationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resolution = GetTableConfigurationResponse_Resolution.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 17) {
            break;
          }

          message.size = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTableConfigurationResponse {
    return {
      resolution: isSet(object.resolution)
        ? GetTableConfigurationResponse_Resolution.fromJSON(object.resolution)
        : undefined,
      size: isSet(object.size) ? globalThis.Number(object.size) : 0,
    };
  },

  toJSON(message: GetTableConfigurationResponse): unknown {
    const obj: any = {};
    if (message.resolution !== undefined) {
      obj.resolution = GetTableConfigurationResponse_Resolution.toJSON(message.resolution);
    }
    if (message.size !== 0) {
      obj.size = message.size;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetTableConfigurationResponse>, I>>(base?: I): GetTableConfigurationResponse {
    return GetTableConfigurationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetTableConfigurationResponse>, I>>(
    object: I,
  ): GetTableConfigurationResponse {
    const message = createBaseGetTableConfigurationResponse();
    message.resolution = (object.resolution !== undefined && object.resolution !== null)
      ? GetTableConfigurationResponse_Resolution.fromPartial(object.resolution)
      : undefined;
    message.size = object.size ?? 0;
    return message;
  },
};

function createBaseGetTableConfigurationResponse_Resolution(): GetTableConfigurationResponse_Resolution {
  return { width: 0, height: 0 };
}

export const GetTableConfigurationResponse_Resolution = {
  encode(message: GetTableConfigurationResponse_Resolution, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.width !== 0) {
      writer.uint32(9).double(message.width);
    }
    if (message.height !== 0) {
      writer.uint32(17).double(message.height);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetTableConfigurationResponse_Resolution {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTableConfigurationResponse_Resolution();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 9) {
            break;
          }

          message.width = reader.double();
          continue;
        case 2:
          if (tag !== 17) {
            break;
          }

          message.height = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTableConfigurationResponse_Resolution {
    return {
      width: isSet(object.width) ? globalThis.Number(object.width) : 0,
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
    };
  },

  toJSON(message: GetTableConfigurationResponse_Resolution): unknown {
    const obj: any = {};
    if (message.width !== 0) {
      obj.width = message.width;
    }
    if (message.height !== 0) {
      obj.height = message.height;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetTableConfigurationResponse_Resolution>, I>>(
    base?: I,
  ): GetTableConfigurationResponse_Resolution {
    return GetTableConfigurationResponse_Resolution.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetTableConfigurationResponse_Resolution>, I>>(
    object: I,
  ): GetTableConfigurationResponse_Resolution {
    const message = createBaseGetTableConfigurationResponse_Resolution();
    message.width = object.width ?? 0;
    message.height = object.height ?? 0;
    return message;
  },
};

function createBaseGetCurrentSceneRequest(): GetCurrentSceneRequest {
  return {};
}

export const GetCurrentSceneRequest = {
  encode(_: GetCurrentSceneRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCurrentSceneRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCurrentSceneRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetCurrentSceneRequest {
    return {};
  },

  toJSON(_: GetCurrentSceneRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCurrentSceneRequest>, I>>(base?: I): GetCurrentSceneRequest {
    return GetCurrentSceneRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCurrentSceneRequest>, I>>(_: I): GetCurrentSceneRequest {
    const message = createBaseGetCurrentSceneRequest();
    return message;
  },
};

function createBaseGetCurrentSceneResponse(): GetCurrentSceneResponse {
  return { scene: undefined };
}

export const GetCurrentSceneResponse = {
  encode(message: GetCurrentSceneResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.scene !== undefined) {
      Scene.encode(message.scene, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCurrentSceneResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCurrentSceneResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.scene = Scene.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCurrentSceneResponse {
    return { scene: isSet(object.scene) ? Scene.fromJSON(object.scene) : undefined };
  },

  toJSON(message: GetCurrentSceneResponse): unknown {
    const obj: any = {};
    if (message.scene !== undefined) {
      obj.scene = Scene.toJSON(message.scene);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCurrentSceneResponse>, I>>(base?: I): GetCurrentSceneResponse {
    return GetCurrentSceneResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCurrentSceneResponse>, I>>(object: I): GetCurrentSceneResponse {
    const message = createBaseGetCurrentSceneResponse();
    message.scene = (object.scene !== undefined && object.scene !== null) ? Scene.fromPartial(object.scene) : undefined;
    return message;
  },
};

function createBaseTrackerGetStatusRequest(): TrackerGetStatusRequest {
  return {};
}

export const TrackerGetStatusRequest = {
  encode(_: TrackerGetStatusRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TrackerGetStatusRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTrackerGetStatusRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): TrackerGetStatusRequest {
    return {};
  },

  toJSON(_: TrackerGetStatusRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<TrackerGetStatusRequest>, I>>(base?: I): TrackerGetStatusRequest {
    return TrackerGetStatusRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TrackerGetStatusRequest>, I>>(_: I): TrackerGetStatusRequest {
    const message = createBaseTrackerGetStatusRequest();
    return message;
  },
};

function createBaseTrackerVector2d(): TrackerVector2d {
  return { x: 0, y: 0 };
}

export const TrackerVector2d = {
  encode(message: TrackerVector2d, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.x !== 0) {
      writer.uint32(13).float(message.x);
    }
    if (message.y !== 0) {
      writer.uint32(21).float(message.y);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TrackerVector2d {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTrackerVector2d();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }

          message.x = reader.float();
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }

          message.y = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TrackerVector2d {
    return {
      x: isSet(object.x) ? globalThis.Number(object.x) : 0,
      y: isSet(object.y) ? globalThis.Number(object.y) : 0,
    };
  },

  toJSON(message: TrackerVector2d): unknown {
    const obj: any = {};
    if (message.x !== 0) {
      obj.x = message.x;
    }
    if (message.y !== 0) {
      obj.y = message.y;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TrackerVector2d>, I>>(base?: I): TrackerVector2d {
    return TrackerVector2d.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TrackerVector2d>, I>>(object: I): TrackerVector2d {
    const message = createBaseTrackerVector2d();
    message.x = object.x ?? 0;
    message.y = object.y ?? 0;
    return message;
  },
};

function createBaseTrackerGetStatusResponse(): TrackerGetStatusResponse {
  return { uuid: "", version: "", state: 0 };
}

export const TrackerGetStatusResponse = {
  encode(message: TrackerGetStatusResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.uuid !== "") {
      writer.uint32(10).string(message.uuid);
    }
    if (message.version !== "") {
      writer.uint32(18).string(message.version);
    }
    if (message.state !== 0) {
      writer.uint32(40).int32(message.state);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TrackerGetStatusResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTrackerGetStatusResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.uuid = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.version = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TrackerGetStatusResponse {
    return {
      uuid: isSet(object.uuid) ? globalThis.String(object.uuid) : "",
      version: isSet(object.version) ? globalThis.String(object.version) : "",
      state: isSet(object.state) ? trackerGetStatusResponse_TrackerStateFromJSON(object.state) : 0,
    };
  },

  toJSON(message: TrackerGetStatusResponse): unknown {
    const obj: any = {};
    if (message.uuid !== "") {
      obj.uuid = message.uuid;
    }
    if (message.version !== "") {
      obj.version = message.version;
    }
    if (message.state !== 0) {
      obj.state = trackerGetStatusResponse_TrackerStateToJSON(message.state);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TrackerGetStatusResponse>, I>>(base?: I): TrackerGetStatusResponse {
    return TrackerGetStatusResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TrackerGetStatusResponse>, I>>(object: I): TrackerGetStatusResponse {
    const message = createBaseTrackerGetStatusResponse();
    message.uuid = object.uuid ?? "";
    message.version = object.version ?? "";
    message.state = object.state ?? 0;
    return message;
  },
};

function createBaseTrackerSetIdleRequest(): TrackerSetIdleRequest {
  return {};
}

export const TrackerSetIdleRequest = {
  encode(_: TrackerSetIdleRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TrackerSetIdleRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTrackerSetIdleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): TrackerSetIdleRequest {
    return {};
  },

  toJSON(_: TrackerSetIdleRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<TrackerSetIdleRequest>, I>>(base?: I): TrackerSetIdleRequest {
    return TrackerSetIdleRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TrackerSetIdleRequest>, I>>(_: I): TrackerSetIdleRequest {
    const message = createBaseTrackerSetIdleRequest();
    return message;
  },
};

function createBaseTrackerStartCalibrationRequest(): TrackerStartCalibrationRequest {
  return { corners: [] };
}

export const TrackerStartCalibrationRequest = {
  encode(message: TrackerStartCalibrationRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.corners) {
      TrackerVector2d.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TrackerStartCalibrationRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTrackerStartCalibrationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.corners.push(TrackerVector2d.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TrackerStartCalibrationRequest {
    return {
      corners: globalThis.Array.isArray(object?.corners)
        ? object.corners.map((e: any) => TrackerVector2d.fromJSON(e))
        : [],
    };
  },

  toJSON(message: TrackerStartCalibrationRequest): unknown {
    const obj: any = {};
    if (message.corners?.length) {
      obj.corners = message.corners.map((e) => TrackerVector2d.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TrackerStartCalibrationRequest>, I>>(base?: I): TrackerStartCalibrationRequest {
    return TrackerStartCalibrationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TrackerStartCalibrationRequest>, I>>(
    object: I,
  ): TrackerStartCalibrationRequest {
    const message = createBaseTrackerStartCalibrationRequest();
    message.corners = object.corners?.map((e) => TrackerVector2d.fromPartial(e)) || [];
    return message;
  },
};

function createBaseTrackerGetCalibrationRequest(): TrackerGetCalibrationRequest {
  return {};
}

export const TrackerGetCalibrationRequest = {
  encode(_: TrackerGetCalibrationRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TrackerGetCalibrationRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTrackerGetCalibrationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): TrackerGetCalibrationRequest {
    return {};
  },

  toJSON(_: TrackerGetCalibrationRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<TrackerGetCalibrationRequest>, I>>(base?: I): TrackerGetCalibrationRequest {
    return TrackerGetCalibrationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TrackerGetCalibrationRequest>, I>>(_: I): TrackerGetCalibrationRequest {
    const message = createBaseTrackerGetCalibrationRequest();
    return message;
  },
};

function createBaseTrackerGetCalibrationResponse(): TrackerGetCalibrationResponse {
  return { foundCorners: [], cornerLocations: [] };
}

export const TrackerGetCalibrationResponse = {
  encode(message: TrackerGetCalibrationResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    writer.uint32(10).fork();
    for (const v of message.foundCorners) {
      writer.int32(v);
    }
    writer.ldelim();
    for (const v of message.cornerLocations) {
      TrackerVector2d.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TrackerGetCalibrationResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTrackerGetCalibrationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 8) {
            message.foundCorners.push(reader.int32());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.foundCorners.push(reader.int32());
            }

            continue;
          }

          break;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.cornerLocations.push(TrackerVector2d.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TrackerGetCalibrationResponse {
    return {
      foundCorners: globalThis.Array.isArray(object?.foundCorners)
        ? object.foundCorners.map((e: any) => globalThis.Number(e))
        : [],
      cornerLocations: globalThis.Array.isArray(object?.cornerLocations)
        ? object.cornerLocations.map((e: any) => TrackerVector2d.fromJSON(e))
        : [],
    };
  },

  toJSON(message: TrackerGetCalibrationResponse): unknown {
    const obj: any = {};
    if (message.foundCorners?.length) {
      obj.foundCorners = message.foundCorners.map((e) => Math.round(e));
    }
    if (message.cornerLocations?.length) {
      obj.cornerLocations = message.cornerLocations.map((e) => TrackerVector2d.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TrackerGetCalibrationResponse>, I>>(base?: I): TrackerGetCalibrationResponse {
    return TrackerGetCalibrationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TrackerGetCalibrationResponse>, I>>(
    object: I,
  ): TrackerGetCalibrationResponse {
    const message = createBaseTrackerGetCalibrationResponse();
    message.foundCorners = object.foundCorners?.map((e) => e) || [];
    message.cornerLocations = object.cornerLocations?.map((e) => TrackerVector2d.fromPartial(e)) || [];
    return message;
  },
};

function createBaseTrackerStartTrackingRequest(): TrackerStartTrackingRequest {
  return { updateRateMs: 0 };
}

export const TrackerStartTrackingRequest = {
  encode(message: TrackerStartTrackingRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.updateRateMs !== 0) {
      writer.uint32(13).float(message.updateRateMs);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TrackerStartTrackingRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTrackerStartTrackingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }

          message.updateRateMs = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TrackerStartTrackingRequest {
    return { updateRateMs: isSet(object.updateRateMs) ? globalThis.Number(object.updateRateMs) : 0 };
  },

  toJSON(message: TrackerStartTrackingRequest): unknown {
    const obj: any = {};
    if (message.updateRateMs !== 0) {
      obj.updateRateMs = message.updateRateMs;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TrackerStartTrackingRequest>, I>>(base?: I): TrackerStartTrackingRequest {
    return TrackerStartTrackingRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TrackerStartTrackingRequest>, I>>(object: I): TrackerStartTrackingRequest {
    const message = createBaseTrackerStartTrackingRequest();
    message.updateRateMs = object.updateRateMs ?? 0;
    return message;
  },
};

function createBaseTrackerGetMarkerLocationRequest(): TrackerGetMarkerLocationRequest {
  return {};
}

export const TrackerGetMarkerLocationRequest = {
  encode(_: TrackerGetMarkerLocationRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TrackerGetMarkerLocationRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTrackerGetMarkerLocationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): TrackerGetMarkerLocationRequest {
    return {};
  },

  toJSON(_: TrackerGetMarkerLocationRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<TrackerGetMarkerLocationRequest>, I>>(base?: I): TrackerGetMarkerLocationRequest {
    return TrackerGetMarkerLocationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TrackerGetMarkerLocationRequest>, I>>(_: I): TrackerGetMarkerLocationRequest {
    const message = createBaseTrackerGetMarkerLocationRequest();
    return message;
  },
};

function createBaseTrackerGetMarkerLocationResponse(): TrackerGetMarkerLocationResponse {
  return { markerLocations: {} };
}

export const TrackerGetMarkerLocationResponse = {
  encode(message: TrackerGetMarkerLocationResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    Object.entries(message.markerLocations).forEach(([key, value]) => {
      TrackerGetMarkerLocationResponse_MarkerLocationsEntry.encode({ key: key as any, value }, writer.uint32(10).fork())
        .ldelim();
    });
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TrackerGetMarkerLocationResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTrackerGetMarkerLocationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          const entry1 = TrackerGetMarkerLocationResponse_MarkerLocationsEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.markerLocations[entry1.key] = entry1.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TrackerGetMarkerLocationResponse {
    return {
      markerLocations: isObject(object.markerLocations)
        ? Object.entries(object.markerLocations).reduce<{ [key: number]: TrackerVector2d }>((acc, [key, value]) => {
          acc[globalThis.Number(key)] = TrackerVector2d.fromJSON(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: TrackerGetMarkerLocationResponse): unknown {
    const obj: any = {};
    if (message.markerLocations) {
      const entries = Object.entries(message.markerLocations);
      if (entries.length > 0) {
        obj.markerLocations = {};
        entries.forEach(([k, v]) => {
          obj.markerLocations[k] = TrackerVector2d.toJSON(v);
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TrackerGetMarkerLocationResponse>, I>>(
    base?: I,
  ): TrackerGetMarkerLocationResponse {
    return TrackerGetMarkerLocationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TrackerGetMarkerLocationResponse>, I>>(
    object: I,
  ): TrackerGetMarkerLocationResponse {
    const message = createBaseTrackerGetMarkerLocationResponse();
    message.markerLocations = Object.entries(object.markerLocations ?? {}).reduce<{ [key: number]: TrackerVector2d }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[globalThis.Number(key)] = TrackerVector2d.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseTrackerGetMarkerLocationResponse_MarkerLocationsEntry(): TrackerGetMarkerLocationResponse_MarkerLocationsEntry {
  return { key: 0, value: undefined };
}

export const TrackerGetMarkerLocationResponse_MarkerLocationsEntry = {
  encode(
    message: TrackerGetMarkerLocationResponse_MarkerLocationsEntry,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.key !== 0) {
      writer.uint32(8).int32(message.key);
    }
    if (message.value !== undefined) {
      TrackerVector2d.encode(message.value, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TrackerGetMarkerLocationResponse_MarkerLocationsEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTrackerGetMarkerLocationResponse_MarkerLocationsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.key = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = TrackerVector2d.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TrackerGetMarkerLocationResponse_MarkerLocationsEntry {
    return {
      key: isSet(object.key) ? globalThis.Number(object.key) : 0,
      value: isSet(object.value) ? TrackerVector2d.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: TrackerGetMarkerLocationResponse_MarkerLocationsEntry): unknown {
    const obj: any = {};
    if (message.key !== 0) {
      obj.key = Math.round(message.key);
    }
    if (message.value !== undefined) {
      obj.value = TrackerVector2d.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TrackerGetMarkerLocationResponse_MarkerLocationsEntry>, I>>(
    base?: I,
  ): TrackerGetMarkerLocationResponse_MarkerLocationsEntry {
    return TrackerGetMarkerLocationResponse_MarkerLocationsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TrackerGetMarkerLocationResponse_MarkerLocationsEntry>, I>>(
    object: I,
  ): TrackerGetMarkerLocationResponse_MarkerLocationsEntry {
    const message = createBaseTrackerGetMarkerLocationResponse_MarkerLocationsEntry();
    message.key = object.key ?? 0;
    message.value = (object.value !== undefined && object.value !== null)
      ? TrackerVector2d.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseTrackerUpdateMarkerLocationRequest(): TrackerUpdateMarkerLocationRequest {
  return { markerLocations: {} };
}

export const TrackerUpdateMarkerLocationRequest = {
  encode(message: TrackerUpdateMarkerLocationRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    Object.entries(message.markerLocations).forEach(([key, value]) => {
      TrackerUpdateMarkerLocationRequest_MarkerLocationsEntry.encode(
        { key: key as any, value },
        writer.uint32(10).fork(),
      ).ldelim();
    });
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TrackerUpdateMarkerLocationRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTrackerUpdateMarkerLocationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          const entry1 = TrackerUpdateMarkerLocationRequest_MarkerLocationsEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.markerLocations[entry1.key] = entry1.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TrackerUpdateMarkerLocationRequest {
    return {
      markerLocations: isObject(object.markerLocations)
        ? Object.entries(object.markerLocations).reduce<{ [key: number]: TrackerVector2d }>((acc, [key, value]) => {
          acc[globalThis.Number(key)] = TrackerVector2d.fromJSON(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: TrackerUpdateMarkerLocationRequest): unknown {
    const obj: any = {};
    if (message.markerLocations) {
      const entries = Object.entries(message.markerLocations);
      if (entries.length > 0) {
        obj.markerLocations = {};
        entries.forEach(([k, v]) => {
          obj.markerLocations[k] = TrackerVector2d.toJSON(v);
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TrackerUpdateMarkerLocationRequest>, I>>(
    base?: I,
  ): TrackerUpdateMarkerLocationRequest {
    return TrackerUpdateMarkerLocationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TrackerUpdateMarkerLocationRequest>, I>>(
    object: I,
  ): TrackerUpdateMarkerLocationRequest {
    const message = createBaseTrackerUpdateMarkerLocationRequest();
    message.markerLocations = Object.entries(object.markerLocations ?? {}).reduce<{ [key: number]: TrackerVector2d }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[globalThis.Number(key)] = TrackerVector2d.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseTrackerUpdateMarkerLocationRequest_MarkerLocationsEntry(): TrackerUpdateMarkerLocationRequest_MarkerLocationsEntry {
  return { key: 0, value: undefined };
}

export const TrackerUpdateMarkerLocationRequest_MarkerLocationsEntry = {
  encode(
    message: TrackerUpdateMarkerLocationRequest_MarkerLocationsEntry,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.key !== 0) {
      writer.uint32(8).int32(message.key);
    }
    if (message.value !== undefined) {
      TrackerVector2d.encode(message.value, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TrackerUpdateMarkerLocationRequest_MarkerLocationsEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTrackerUpdateMarkerLocationRequest_MarkerLocationsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.key = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = TrackerVector2d.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TrackerUpdateMarkerLocationRequest_MarkerLocationsEntry {
    return {
      key: isSet(object.key) ? globalThis.Number(object.key) : 0,
      value: isSet(object.value) ? TrackerVector2d.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: TrackerUpdateMarkerLocationRequest_MarkerLocationsEntry): unknown {
    const obj: any = {};
    if (message.key !== 0) {
      obj.key = Math.round(message.key);
    }
    if (message.value !== undefined) {
      obj.value = TrackerVector2d.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TrackerUpdateMarkerLocationRequest_MarkerLocationsEntry>, I>>(
    base?: I,
  ): TrackerUpdateMarkerLocationRequest_MarkerLocationsEntry {
    return TrackerUpdateMarkerLocationRequest_MarkerLocationsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TrackerUpdateMarkerLocationRequest_MarkerLocationsEntry>, I>>(
    object: I,
  ): TrackerUpdateMarkerLocationRequest_MarkerLocationsEntry {
    const message = createBaseTrackerUpdateMarkerLocationRequest_MarkerLocationsEntry();
    message.key = object.key ?? 0;
    message.value = (object.value !== undefined && object.value !== null)
      ? TrackerVector2d.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
