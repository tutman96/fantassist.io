// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.26.1
// source: protos/external.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { Scene } from "./scene";

export const protobufPackage = "";

export interface Packet {
  requestId: string;
  request?: Request | undefined;
  response?: Response | undefined;
}

export interface Request {
  /** Respond with AckResponse */
  helloRequest?:
    | HelloRequest
    | undefined;
  /** Respond with AckResponse */
  displaySceneRequest?:
    | DisplaySceneRequest
    | undefined;
  /** Respond with GetAssetResponse */
  getAssetRequest?:
    | GetAssetRequest
    | undefined;
  /** Respond with GetTableConfigurationResponse */
  getTableConfigurationRequest?:
    | GetTableConfigurationRequest
    | undefined;
  /** Respond with GetCurrentSceneResponse */
  getCurrentSceneRequest?: GetCurrentSceneRequest | undefined;
}

export interface Response {
  ackResponse?: AckResponse | undefined;
  getAssetResponse?: GetAssetResponse | undefined;
  getTableConfigurationResponse?: GetTableConfigurationResponse | undefined;
  getCurrentSceneResponse?: GetCurrentSceneResponse | undefined;
}

export interface HelloRequest {
}

export interface AckResponse {
}

export interface DisplaySceneRequest {
  scene: Scene | undefined;
}

export interface GetAssetRequest {
  id: string;
}

export interface GetAssetResponse {
  id: string;
  payload: Uint8Array;
  mediaType: string;
}

export interface GetTableConfigurationRequest {
}

export interface GetTableConfigurationResponse {
  resolution: GetTableConfigurationResponse_Resolution | undefined;
  size: number;
  playAudioOnTable: boolean;
}

export interface GetTableConfigurationResponse_Resolution {
  width: number;
  height: number;
}

export interface GetCurrentSceneRequest {
}

export interface GetCurrentSceneResponse {
  scene: Scene | undefined;
}

function createBasePacket(): Packet {
  return { requestId: "", request: undefined, response: undefined };
}

export const Packet = {
  encode(message: Packet, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.requestId !== "") {
      writer.uint32(10).string(message.requestId);
    }
    if (message.request !== undefined) {
      Request.encode(message.request, writer.uint32(82).fork()).ldelim();
    }
    if (message.response !== undefined) {
      Response.encode(message.response, writer.uint32(90).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Packet {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePacket();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.requestId = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.request = Request.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.response = Response.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Packet {
    return {
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      request: isSet(object.request) ? Request.fromJSON(object.request) : undefined,
      response: isSet(object.response) ? Response.fromJSON(object.response) : undefined,
    };
  },

  toJSON(message: Packet): unknown {
    const obj: any = {};
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.request !== undefined) {
      obj.request = Request.toJSON(message.request);
    }
    if (message.response !== undefined) {
      obj.response = Response.toJSON(message.response);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Packet>, I>>(base?: I): Packet {
    return Packet.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Packet>, I>>(object: I): Packet {
    const message = createBasePacket();
    message.requestId = object.requestId ?? "";
    message.request = (object.request !== undefined && object.request !== null)
      ? Request.fromPartial(object.request)
      : undefined;
    message.response = (object.response !== undefined && object.response !== null)
      ? Response.fromPartial(object.response)
      : undefined;
    return message;
  },
};

function createBaseRequest(): Request {
  return {
    helloRequest: undefined,
    displaySceneRequest: undefined,
    getAssetRequest: undefined,
    getTableConfigurationRequest: undefined,
    getCurrentSceneRequest: undefined,
  };
}

export const Request = {
  encode(message: Request, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.helloRequest !== undefined) {
      HelloRequest.encode(message.helloRequest, writer.uint32(10).fork()).ldelim();
    }
    if (message.displaySceneRequest !== undefined) {
      DisplaySceneRequest.encode(message.displaySceneRequest, writer.uint32(18).fork()).ldelim();
    }
    if (message.getAssetRequest !== undefined) {
      GetAssetRequest.encode(message.getAssetRequest, writer.uint32(26).fork()).ldelim();
    }
    if (message.getTableConfigurationRequest !== undefined) {
      GetTableConfigurationRequest.encode(message.getTableConfigurationRequest, writer.uint32(34).fork()).ldelim();
    }
    if (message.getCurrentSceneRequest !== undefined) {
      GetCurrentSceneRequest.encode(message.getCurrentSceneRequest, writer.uint32(42).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Request {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.helloRequest = HelloRequest.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displaySceneRequest = DisplaySceneRequest.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.getAssetRequest = GetAssetRequest.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.getTableConfigurationRequest = GetTableConfigurationRequest.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.getCurrentSceneRequest = GetCurrentSceneRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Request {
    return {
      helloRequest: isSet(object.helloRequest) ? HelloRequest.fromJSON(object.helloRequest) : undefined,
      displaySceneRequest: isSet(object.displaySceneRequest)
        ? DisplaySceneRequest.fromJSON(object.displaySceneRequest)
        : undefined,
      getAssetRequest: isSet(object.getAssetRequest) ? GetAssetRequest.fromJSON(object.getAssetRequest) : undefined,
      getTableConfigurationRequest: isSet(object.getTableConfigurationRequest)
        ? GetTableConfigurationRequest.fromJSON(object.getTableConfigurationRequest)
        : undefined,
      getCurrentSceneRequest: isSet(object.getCurrentSceneRequest)
        ? GetCurrentSceneRequest.fromJSON(object.getCurrentSceneRequest)
        : undefined,
    };
  },

  toJSON(message: Request): unknown {
    const obj: any = {};
    if (message.helloRequest !== undefined) {
      obj.helloRequest = HelloRequest.toJSON(message.helloRequest);
    }
    if (message.displaySceneRequest !== undefined) {
      obj.displaySceneRequest = DisplaySceneRequest.toJSON(message.displaySceneRequest);
    }
    if (message.getAssetRequest !== undefined) {
      obj.getAssetRequest = GetAssetRequest.toJSON(message.getAssetRequest);
    }
    if (message.getTableConfigurationRequest !== undefined) {
      obj.getTableConfigurationRequest = GetTableConfigurationRequest.toJSON(message.getTableConfigurationRequest);
    }
    if (message.getCurrentSceneRequest !== undefined) {
      obj.getCurrentSceneRequest = GetCurrentSceneRequest.toJSON(message.getCurrentSceneRequest);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Request>, I>>(base?: I): Request {
    return Request.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Request>, I>>(object: I): Request {
    const message = createBaseRequest();
    message.helloRequest = (object.helloRequest !== undefined && object.helloRequest !== null)
      ? HelloRequest.fromPartial(object.helloRequest)
      : undefined;
    message.displaySceneRequest = (object.displaySceneRequest !== undefined && object.displaySceneRequest !== null)
      ? DisplaySceneRequest.fromPartial(object.displaySceneRequest)
      : undefined;
    message.getAssetRequest = (object.getAssetRequest !== undefined && object.getAssetRequest !== null)
      ? GetAssetRequest.fromPartial(object.getAssetRequest)
      : undefined;
    message.getTableConfigurationRequest =
      (object.getTableConfigurationRequest !== undefined && object.getTableConfigurationRequest !== null)
        ? GetTableConfigurationRequest.fromPartial(object.getTableConfigurationRequest)
        : undefined;
    message.getCurrentSceneRequest =
      (object.getCurrentSceneRequest !== undefined && object.getCurrentSceneRequest !== null)
        ? GetCurrentSceneRequest.fromPartial(object.getCurrentSceneRequest)
        : undefined;
    return message;
  },
};

function createBaseResponse(): Response {
  return {
    ackResponse: undefined,
    getAssetResponse: undefined,
    getTableConfigurationResponse: undefined,
    getCurrentSceneResponse: undefined,
  };
}

export const Response = {
  encode(message: Response, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.ackResponse !== undefined) {
      AckResponse.encode(message.ackResponse, writer.uint32(10).fork()).ldelim();
    }
    if (message.getAssetResponse !== undefined) {
      GetAssetResponse.encode(message.getAssetResponse, writer.uint32(18).fork()).ldelim();
    }
    if (message.getTableConfigurationResponse !== undefined) {
      GetTableConfigurationResponse.encode(message.getTableConfigurationResponse, writer.uint32(26).fork()).ldelim();
    }
    if (message.getCurrentSceneResponse !== undefined) {
      GetCurrentSceneResponse.encode(message.getCurrentSceneResponse, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Response {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.ackResponse = AckResponse.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.getAssetResponse = GetAssetResponse.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.getTableConfigurationResponse = GetTableConfigurationResponse.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.getCurrentSceneResponse = GetCurrentSceneResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Response {
    return {
      ackResponse: isSet(object.ackResponse) ? AckResponse.fromJSON(object.ackResponse) : undefined,
      getAssetResponse: isSet(object.getAssetResponse) ? GetAssetResponse.fromJSON(object.getAssetResponse) : undefined,
      getTableConfigurationResponse: isSet(object.getTableConfigurationResponse)
        ? GetTableConfigurationResponse.fromJSON(object.getTableConfigurationResponse)
        : undefined,
      getCurrentSceneResponse: isSet(object.getCurrentSceneResponse)
        ? GetCurrentSceneResponse.fromJSON(object.getCurrentSceneResponse)
        : undefined,
    };
  },

  toJSON(message: Response): unknown {
    const obj: any = {};
    if (message.ackResponse !== undefined) {
      obj.ackResponse = AckResponse.toJSON(message.ackResponse);
    }
    if (message.getAssetResponse !== undefined) {
      obj.getAssetResponse = GetAssetResponse.toJSON(message.getAssetResponse);
    }
    if (message.getTableConfigurationResponse !== undefined) {
      obj.getTableConfigurationResponse = GetTableConfigurationResponse.toJSON(message.getTableConfigurationResponse);
    }
    if (message.getCurrentSceneResponse !== undefined) {
      obj.getCurrentSceneResponse = GetCurrentSceneResponse.toJSON(message.getCurrentSceneResponse);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Response>, I>>(base?: I): Response {
    return Response.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Response>, I>>(object: I): Response {
    const message = createBaseResponse();
    message.ackResponse = (object.ackResponse !== undefined && object.ackResponse !== null)
      ? AckResponse.fromPartial(object.ackResponse)
      : undefined;
    message.getAssetResponse = (object.getAssetResponse !== undefined && object.getAssetResponse !== null)
      ? GetAssetResponse.fromPartial(object.getAssetResponse)
      : undefined;
    message.getTableConfigurationResponse =
      (object.getTableConfigurationResponse !== undefined && object.getTableConfigurationResponse !== null)
        ? GetTableConfigurationResponse.fromPartial(object.getTableConfigurationResponse)
        : undefined;
    message.getCurrentSceneResponse =
      (object.getCurrentSceneResponse !== undefined && object.getCurrentSceneResponse !== null)
        ? GetCurrentSceneResponse.fromPartial(object.getCurrentSceneResponse)
        : undefined;
    return message;
  },
};

function createBaseHelloRequest(): HelloRequest {
  return {};
}

export const HelloRequest = {
  encode(_: HelloRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): HelloRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHelloRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): HelloRequest {
    return {};
  },

  toJSON(_: HelloRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<HelloRequest>, I>>(base?: I): HelloRequest {
    return HelloRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HelloRequest>, I>>(_: I): HelloRequest {
    const message = createBaseHelloRequest();
    return message;
  },
};

function createBaseAckResponse(): AckResponse {
  return {};
}

export const AckResponse = {
  encode(_: AckResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AckResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAckResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): AckResponse {
    return {};
  },

  toJSON(_: AckResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<AckResponse>, I>>(base?: I): AckResponse {
    return AckResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AckResponse>, I>>(_: I): AckResponse {
    const message = createBaseAckResponse();
    return message;
  },
};

function createBaseDisplaySceneRequest(): DisplaySceneRequest {
  return { scene: undefined };
}

export const DisplaySceneRequest = {
  encode(message: DisplaySceneRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.scene !== undefined) {
      Scene.encode(message.scene, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DisplaySceneRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDisplaySceneRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.scene = Scene.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DisplaySceneRequest {
    return { scene: isSet(object.scene) ? Scene.fromJSON(object.scene) : undefined };
  },

  toJSON(message: DisplaySceneRequest): unknown {
    const obj: any = {};
    if (message.scene !== undefined) {
      obj.scene = Scene.toJSON(message.scene);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DisplaySceneRequest>, I>>(base?: I): DisplaySceneRequest {
    return DisplaySceneRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DisplaySceneRequest>, I>>(object: I): DisplaySceneRequest {
    const message = createBaseDisplaySceneRequest();
    message.scene = (object.scene !== undefined && object.scene !== null) ? Scene.fromPartial(object.scene) : undefined;
    return message;
  },
};

function createBaseGetAssetRequest(): GetAssetRequest {
  return { id: "" };
}

export const GetAssetRequest = {
  encode(message: GetAssetRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetAssetRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAssetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAssetRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: GetAssetRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAssetRequest>, I>>(base?: I): GetAssetRequest {
    return GetAssetRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAssetRequest>, I>>(object: I): GetAssetRequest {
    const message = createBaseGetAssetRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseGetAssetResponse(): GetAssetResponse {
  return { id: "", payload: new Uint8Array(0), mediaType: "" };
}

export const GetAssetResponse = {
  encode(message: GetAssetResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.payload.length !== 0) {
      writer.uint32(18).bytes(message.payload);
    }
    if (message.mediaType !== "") {
      writer.uint32(26).string(message.mediaType);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetAssetResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAssetResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.payload = reader.bytes();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.mediaType = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAssetResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      payload: isSet(object.payload) ? bytesFromBase64(object.payload) : new Uint8Array(0),
      mediaType: isSet(object.mediaType) ? globalThis.String(object.mediaType) : "",
    };
  },

  toJSON(message: GetAssetResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.payload.length !== 0) {
      obj.payload = base64FromBytes(message.payload);
    }
    if (message.mediaType !== "") {
      obj.mediaType = message.mediaType;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAssetResponse>, I>>(base?: I): GetAssetResponse {
    return GetAssetResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAssetResponse>, I>>(object: I): GetAssetResponse {
    const message = createBaseGetAssetResponse();
    message.id = object.id ?? "";
    message.payload = object.payload ?? new Uint8Array(0);
    message.mediaType = object.mediaType ?? "";
    return message;
  },
};

function createBaseGetTableConfigurationRequest(): GetTableConfigurationRequest {
  return {};
}

export const GetTableConfigurationRequest = {
  encode(_: GetTableConfigurationRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetTableConfigurationRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTableConfigurationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetTableConfigurationRequest {
    return {};
  },

  toJSON(_: GetTableConfigurationRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetTableConfigurationRequest>, I>>(base?: I): GetTableConfigurationRequest {
    return GetTableConfigurationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetTableConfigurationRequest>, I>>(_: I): GetTableConfigurationRequest {
    const message = createBaseGetTableConfigurationRequest();
    return message;
  },
};

function createBaseGetTableConfigurationResponse(): GetTableConfigurationResponse {
  return { resolution: undefined, size: 0, playAudioOnTable: false };
}

export const GetTableConfigurationResponse = {
  encode(message: GetTableConfigurationResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.resolution !== undefined) {
      GetTableConfigurationResponse_Resolution.encode(message.resolution, writer.uint32(10).fork()).ldelim();
    }
    if (message.size !== 0) {
      writer.uint32(17).double(message.size);
    }
    if (message.playAudioOnTable !== false) {
      writer.uint32(24).bool(message.playAudioOnTable);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetTableConfigurationResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTableConfigurationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resolution = GetTableConfigurationResponse_Resolution.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 17) {
            break;
          }

          message.size = reader.double();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.playAudioOnTable = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTableConfigurationResponse {
    return {
      resolution: isSet(object.resolution)
        ? GetTableConfigurationResponse_Resolution.fromJSON(object.resolution)
        : undefined,
      size: isSet(object.size) ? globalThis.Number(object.size) : 0,
      playAudioOnTable: isSet(object.playAudioOnTable) ? globalThis.Boolean(object.playAudioOnTable) : false,
    };
  },

  toJSON(message: GetTableConfigurationResponse): unknown {
    const obj: any = {};
    if (message.resolution !== undefined) {
      obj.resolution = GetTableConfigurationResponse_Resolution.toJSON(message.resolution);
    }
    if (message.size !== 0) {
      obj.size = message.size;
    }
    if (message.playAudioOnTable !== false) {
      obj.playAudioOnTable = message.playAudioOnTable;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetTableConfigurationResponse>, I>>(base?: I): GetTableConfigurationResponse {
    return GetTableConfigurationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetTableConfigurationResponse>, I>>(
    object: I,
  ): GetTableConfigurationResponse {
    const message = createBaseGetTableConfigurationResponse();
    message.resolution = (object.resolution !== undefined && object.resolution !== null)
      ? GetTableConfigurationResponse_Resolution.fromPartial(object.resolution)
      : undefined;
    message.size = object.size ?? 0;
    message.playAudioOnTable = object.playAudioOnTable ?? false;
    return message;
  },
};

function createBaseGetTableConfigurationResponse_Resolution(): GetTableConfigurationResponse_Resolution {
  return { width: 0, height: 0 };
}

export const GetTableConfigurationResponse_Resolution = {
  encode(message: GetTableConfigurationResponse_Resolution, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.width !== 0) {
      writer.uint32(9).double(message.width);
    }
    if (message.height !== 0) {
      writer.uint32(17).double(message.height);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetTableConfigurationResponse_Resolution {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTableConfigurationResponse_Resolution();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 9) {
            break;
          }

          message.width = reader.double();
          continue;
        case 2:
          if (tag !== 17) {
            break;
          }

          message.height = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTableConfigurationResponse_Resolution {
    return {
      width: isSet(object.width) ? globalThis.Number(object.width) : 0,
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
    };
  },

  toJSON(message: GetTableConfigurationResponse_Resolution): unknown {
    const obj: any = {};
    if (message.width !== 0) {
      obj.width = message.width;
    }
    if (message.height !== 0) {
      obj.height = message.height;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetTableConfigurationResponse_Resolution>, I>>(
    base?: I,
  ): GetTableConfigurationResponse_Resolution {
    return GetTableConfigurationResponse_Resolution.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetTableConfigurationResponse_Resolution>, I>>(
    object: I,
  ): GetTableConfigurationResponse_Resolution {
    const message = createBaseGetTableConfigurationResponse_Resolution();
    message.width = object.width ?? 0;
    message.height = object.height ?? 0;
    return message;
  },
};

function createBaseGetCurrentSceneRequest(): GetCurrentSceneRequest {
  return {};
}

export const GetCurrentSceneRequest = {
  encode(_: GetCurrentSceneRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCurrentSceneRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCurrentSceneRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetCurrentSceneRequest {
    return {};
  },

  toJSON(_: GetCurrentSceneRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCurrentSceneRequest>, I>>(base?: I): GetCurrentSceneRequest {
    return GetCurrentSceneRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCurrentSceneRequest>, I>>(_: I): GetCurrentSceneRequest {
    const message = createBaseGetCurrentSceneRequest();
    return message;
  },
};

function createBaseGetCurrentSceneResponse(): GetCurrentSceneResponse {
  return { scene: undefined };
}

export const GetCurrentSceneResponse = {
  encode(message: GetCurrentSceneResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.scene !== undefined) {
      Scene.encode(message.scene, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCurrentSceneResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCurrentSceneResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.scene = Scene.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCurrentSceneResponse {
    return { scene: isSet(object.scene) ? Scene.fromJSON(object.scene) : undefined };
  },

  toJSON(message: GetCurrentSceneResponse): unknown {
    const obj: any = {};
    if (message.scene !== undefined) {
      obj.scene = Scene.toJSON(message.scene);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCurrentSceneResponse>, I>>(base?: I): GetCurrentSceneResponse {
    return GetCurrentSceneResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCurrentSceneResponse>, I>>(object: I): GetCurrentSceneResponse {
    const message = createBaseGetCurrentSceneResponse();
    message.scene = (object.scene !== undefined && object.scene !== null) ? Scene.fromPartial(object.scene) : undefined;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
